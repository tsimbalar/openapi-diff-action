package com.everee.actions.openapidiff;

import com.qdesrame.openapi.diff.model.ChangedOpenApi;
import com.qdesrame.openapi.diff.output.MarkdownRender;
import org.kohsuke.github.GHIssueComment;
import org.kohsuke.github.GHPullRequest;

import java.io.IOException;
import java.util.stream.StreamSupport;

import static com.everee.actions.openapidiff.GitHubActionUtils.printInfo;
import static com.everee.actions.openapidiff.GitHubActionUtils.variableExists;


public abstract class GitHubPullRequestUtils {

    private static final String header = "## OpenAPI Backward Compatibility Report";
    private static final String tagline = "_* This report was automatically generated by [evereepay/openapi-diff-action](https://github.com/evereepay/openapi-diff-action) and [quen2404/openapi-diff](https://github.com/quen2404/openapi-diff)_";
    private static final String identifier = "<!-- [openapi-diff-action] -->";
    private static final String shieldSuccess = "![](https://img.shields.io/static/v1?label=OpenAPI&message=Backward%20Compatible&color=008651)";
    private static final String shieldFailure = "![](https://img.shields.io/static/v1?label=OpenAPI&message=Breaking%20Changes%20Detected&color=D73A4A)";
    private static final String summarySuccess = "#### OpenAPI spec is backward-compatible with BASE revision";
    private static final String summaryFailure = "#### OpenAPI spec is not backward-compatible with BASE revision";
    private static final String descriptionSuccess = "The OpenAPI spec from this pull request is backward-compatible with the BASE revision. A human should still review this PR to ensure that functionality has been preserved in a backward-compatible way.";
    private static final String descriptionFailure = "This pull request introduces changes to the OpenAPI spec that break backward-compatibility with the BASE revision. Existing clients may crash or generate exceptions if this code is deployed to production. Developers should always attempt to maintain backward-compatibility and perform a deprecation cycle prior to removal. If breaking changes are needed, the API should be versioned.";

    public static void addLabel(ChangedOpenApi diff) throws IOException {
        if (variableExists("PULL_REQUEST")) {
            var changeType = ChangeTypeUtils.getChangeType(diff);
            var pullRequest = GitHubApiUtils.pullRequest;
            GitHubLabelUtils.applyOasLabel(pullRequest, changeType);
        } else {
            printInfo("PULL_REQUEST variable not found; skipping change type label");
        }
    }

    public static void addReport(ChangedOpenApi diff) throws IOException {
        if (variableExists("PULL_REQUEST")) {
            var commentBody = createCommentBody(diff);
            var pullRequest = GitHubApiUtils.pullRequest;
            var existingComment = findExistingComment(pullRequest);
            if (existingComment != null) {
                existingComment.update(commentBody);
                var commentId = existingComment.getId();
                var pullRequestId = pullRequest.getId();
                printInfo("Updated report in comment %s on PR #%s", commentId, pullRequestId);
            } else {
                var newComment = pullRequest.comment(commentBody);
                var commentId = newComment.getId();
                var pullRequestId = pullRequest.getId();
                printInfo("Created new report in comment %s on PR #%s", commentId, pullRequestId);
            }
        } else {
            printInfo("PULL_REQUEST variable not found; skipping report comment");
        }
    }

    private static String createCommentBody(ChangedOpenApi diff) {
        var markdown = new MarkdownRender().render(diff);
        var shield = createShield(diff);
        var summary = createSummary(diff);
        var description = createDescription(diff);
        return String.join("\n", identifier, header, shield, summary, description, markdown, "---", tagline);
    }

    private static String createShield(ChangedOpenApi diff) {
        return diff.isDiffBackwardCompatible() ? shieldSuccess : shieldFailure;
    }

    private static String createSummary(ChangedOpenApi diff) {
        return diff.isDiffBackwardCompatible() ? summarySuccess : summaryFailure;
    }

    private static String createDescription(ChangedOpenApi diff) {
        return diff.isDiffBackwardCompatible() ? descriptionSuccess : descriptionFailure;
    }

    private static GHIssueComment findExistingComment(GHPullRequest pullRequest) throws IOException {
        var spliterator = pullRequest.listComments().withPageSize(20).spliterator();
        return StreamSupport.stream(spliterator, false)
                .filter(c -> c.getBody().contains(identifier))
                .findFirst()
                .orElse(null);
    }
}
